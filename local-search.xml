<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于开发、测试、预生产、生产环境</title>
    <link href="/2022/06/22/WorkStudy/"/>
    <url>/2022/06/22/WorkStudy/</url>
    
    <content type="html"><![CDATA[<h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>程序员专门用于开发及调试的服务器，一般情况下，只有这个环境可以改配置和进行开发，但一般不在这个环境下创建数据。每位开发会在自己的dev分支上进行开发。为了开发调试方便，打开错误报告方便调试。</p><h3 id="2、测试环境"><a href="#2、测试环境" class="headerlink" title="2、测试环境"></a>2、测试环境</h3><p>测试环境是指测试人员利用一些工具及数据所模拟出的、接近真实用户使用环境的环境。进行功能测试，可以创建数据。一般是克隆一份生产环境的配置，测试环境和生产环境一致，用测试环境的目的是，测试时，不影响线上项目的正常使用，等测试完毕，再上生产环境。</p><h3 id="3、回归环境（测试）"><a href="#3、回归环境（测试）" class="headerlink" title="3、回归环境（测试）"></a>3、回归环境（测试）</h3><p>回归bug的环境，其实就是我们的测试环境，在测试环境上测试、回归验证bug。修改了旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048">代码</a>产生错误。</p><h3 id="4、预生产环境（非必须）"><a href="#4、预生产环境（非必须）" class="headerlink" title="4、预生产环境（非必须）"></a>4、预生产环境（非必须）</h3><p>预发布环境是正式发布前最后一次测试，所有的功能和配置，数据库都已经与线上环境高度相似，仅准入本次需要上线的功能代码，测试人员确认代码在测试环境经过测试用例测试没有问题后，提交预发布环境进行测试。因为在少数情况下即使预发布通过了，都不能保证正式生产环境可以100%不出问题。</p><p><strong>预生产环境和测试环境的区别</strong>：</p><p>预生产环境和生产系统的同步性更高，几乎一样，有些测试，比如需要大数据量的，用预生产环境看程序性能比用测试环境（一般情况下数据会较少）会更准确。</p><h3 id="5、生产坏境"><a href="#5、生产坏境" class="headerlink" title="5、生产坏境"></a>5、生产坏境</h3><p>即发布环境，真实用户访问的环境。由特定人员来维护，一般人没有权限去修改。该环境是指正式提供对外服务的，真实用户线上使用的环境；关闭错误报告，打开错误日志。</p><p><strong>预生产环境和生产环境的区别</strong>：</p><ul><li>预生产环境中新功能为最新代码，其他的功能和生产环境一致。</li><li>预生产环境和生产环境的访问域名不同。</li></ul><h3 id="6、灰度发布"><a href="#6、灰度发布" class="headerlink" title="6、灰度发布"></a>6、灰度发布</h3><p>发生在预发布环境之后，生产环境之前。 生产环境一般会部署在多台机器上，以防某台机器出现故障，这样其他机器可以继续运行，不影响用户使用。灰度发布会发布到其中的几台机器上，验证新功能是否正常。如果失败，只需回滚这几台机器即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>开发相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络（二）</title>
    <link href="/2022/05/25/NetOfCom_2/"/>
    <url>/2022/05/25/NetOfCom_2/</url>
    
    <content type="html"><![CDATA[<h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h2><ul><li>从发送主机向接收主机传送数据段（segment）</li><li><strong>发送主机</strong>：将数据段封装到数据报（datagram）中</li><li><strong>接收主机</strong>：向传输层交付数据段</li><li>每个主机和路由器都运行网络层协议</li><li>路由器检验所有穿越它的IP数据报的头部域：决策如何处理IP数据报</li></ul><p>网络层的核心功能：转发与路由</p><ul><li><strong>转发</strong>：将分组从路由器的输入端口转移到合适的输出端口</li><li><strong>路由</strong>：确定分组从源到目的经过的路径，由路由算法确定</li></ul><p><strong>无连接服务：数据报网络</strong></p><ul><li>不事先为系列分组的传输确定传输路径</li><li>每个分组独立确定传输路径</li><li>不同分组可能传输路径不同</li></ul><p><strong>连接服务：虚电路网络</strong></p><ul><li>首先为系列分组的传输确定从源到目的经过的路径（建立连接）</li><li>然后沿着路径（连接）传输系列分组</li><li>系列分组传输路径相同</li><li>传输结束后拆除连接</li></ul><p>数据报网络和虚电路网络均是典型的分组交换网络</p><h3 id="4-1虚电路网络与数据报网络"><a href="#4-1虚电路网络与数据报网络" class="headerlink" title="4.1虚电路网络与数据报网络"></a>4.1虚电路网络与数据报网络</h3><h4 id="4-1-1虚电路网络"><a href="#4-1-1虚电路网络" class="headerlink" title="4.1.1虚电路网络"></a>4.1.1虚电路网络</h4><p>一条从源到目的主机，类似于电路的路径（逻辑类似）</p><ul><li>分组交换</li><li>每个分组的传输利用链路的全部带宽</li><li>源到目的路径经过的网络层设备共同完成虚电路功能</li></ul><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimgs.itxueyuan.com%2F737467-20210219161222208-1421812801.png&refer=http%3A%2F%2Fimgs.itxueyuan.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655813402&t=e1956e3e5f7b9adbb8188e35a7c7dbcf" style="zoom:67%;"><p><strong>虚电路信令协议</strong>：</p><ul><li>用于VC的建立，维护与拆除，路径选择</li><li>应用于虚电路网络，如ATM、帧中继等</li><li>目前Internet不采用</li></ul><p><img src="http://mms2.baidu.com/it/u=4104751731,3333378823&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=1118&h=341"></p><h4 id="4-1-2数据报网络"><a href="#4-1-2数据报网络" class="headerlink" title="4.1.2数据报网络"></a>4.1.2数据报网络</h4><ul><li>网络层无连接</li><li>每个分组携带目的地址</li><li>路由器根据分组的目的地址转发分组：<ul><li>基于路由协议/算法构建转发表</li><li>检索转发表</li><li>每个分组独立选路</li></ul></li></ul><p><img src="http://mms2.baidu.com/it/u=4104751731,3333378823&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=1118&h=341"></p><p><img src="http://mms0.baidu.com/it/u=946332981,2792023099&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=970&h=500"></p><p><img src="http://mms0.baidu.com/it/u=3506952241,2034148706&fm=253&app=138&f=PNG&fmt=auto&q=75?w=778&h=500"></p><h3 id="4-2IP"><a href="#4-2IP" class="headerlink" title="4.2IP"></a>4.2IP</h3><h4 id="4-2-1P数据报（分组）格式"><a href="#4-2-1P数据报（分组）格式" class="headerlink" title="4.2.1P数据报（分组）格式"></a>4.2.1P数据报（分组）格式</h4><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F2021020617202998.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NTgzNDUw%2Csize_16%2Ccolor_FFFFFF%2Ct_70%23pic_center&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655881532&t=52088847de760e4e68ee971170e2a8c4"></p><h4 id="4-2-2IP分片"><a href="#4-2-2IP分片" class="headerlink" title="4.2.2IP分片"></a>4.2.2IP分片</h4><p>网络链路存在<strong>MTU</strong>（最大传输单元）——链路层数据帧可封装数据的上限，不同链路的MTU不同。</p><p><strong>标识</strong>：标识一个IP分组，IP协议利用一个计数器，每产生IP分组计数器加1，作为IP分组的标识。</p><p><strong>标志位</strong>：保留+DF+MF</p><ul><li>DF=1：禁止分片，DF=0：允许分片</li><li>MF=1：非最后一片，MF=0：最后一片（或未分片）</li></ul><p><strong>片偏移</strong>：一个IP分组分片封装原IP分组数据的相对偏移量</p><p><img src="http://mms0.baidu.com/it/u=3676435238,734003736&fm=253&app=138&f=PNG&fmt=auto&q=75?w=916&h=500"></p><h4 id="4-2-3IP编址"><a href="#4-2-3IP编址" class="headerlink" title="4.2.3IP编址"></a>4.2.3IP编址</h4><p>IP地址：32比特（IPv4）编号标识主机、路由器的接口</p><ul><li>网络号（NetID）：高位比特</li><li>主机号（HostID）：低位比特</li></ul><p>IP子网：</p><ul><li>IP地址具有相同网络号的设备</li><li>不跨越路由器可以彼此物理联通的接口</li></ul><h4 id="4-2-4有类IP地址"><a href="#4-2-4有类IP地址" class="headerlink" title="4.2.4有类IP地址"></a>4.2.4有类IP地址</h4><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20181104140430928.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZpZ2h0aW5nX05vMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655883001&t=56f504ea5096330bf1453c1a7928be2c"></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.w3xue.com%2Ffiles%2Fa20203%2F20200324114749397.png&refer=http%3A%2F%2Fwww.w3xue.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655883153&t=96edbae358001e23361f8d067d171c6b"></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.shangdixinxi.com%2Fup%2Finfo%2F201910%2F20191024125251520769.png&refer=http%3A%2F%2Fimg.shangdixinxi.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655883181&t=ea27898fb4c54ff5a7bad9680b625d61"></p><h4 id="4-2-5子网划分"><a href="#4-2-5子网划分" class="headerlink" title="4.2.5子网划分"></a>4.2.5子网划分</h4><p>IP地址：</p><ul><li>网络号（NetID）：高位比特</li><li>子网号（SubID）：原主机号高位部分比特</li><li>主机号（HostID）：地位比特</li></ul><p>子网掩码取值：NetID、SubID位全取1，HostID位全取0</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F16869092-ae50a5d973bbe632.PNG&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655883511&t=c58dbf8388ef8abb693887a1765505d7"></p><p><img src="http://mms0.baidu.com/it/u=3449954409,2587773228&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=865&h=500"></p><h3 id="4-3CIDR"><a href="#4-3CIDR" class="headerlink" title="4.3CIDR"></a>4.3CIDR</h3><p>Classless InterDomain Routing：无类域间路由</p><p>消除传统的A类、B类和C类地址界限，融合子网地址与子网掩码，方便子网划分：</p><ul><li>无类地址格式：a.b.c.d/x, 其中x为前缀长度</li></ul><p>例如，子网201.2.3.64，255.255.255.192 —&gt; 201.2.3.64/26</p><p><strong>无类域间路由作用</strong>：</p><ul><li>提高IPv4地址空间分配效率</li><li>提高路由效率：将多个子网聚合为一个较大的子网，称为超网</li></ul><h3 id="4-4DHCP协议"><a href="#4-4DHCP协议" class="headerlink" title="4.4DHCP协议"></a>4.4DHCP协议</h3><p>Dynamic Host Configuration Protocol：动态主机配置协议</p><p>一个主机如何获得IP地址？</p><ul><li>“硬编码”</li><li>动态主机配置协DHCP<ul><li>从服务器动态获取</li><li>“即插即用”</li><li>允许地址重用</li><li>支持在用地址续租</li><li>支持移动用户加入网络</li></ul></li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs2.51cto.com%2Fimages%2F202110%2F099499088b786f18bc15945e4599e294cb4918.jpg%3Fx-oss-process%3Dimage%2Fwatermark%2Csize_14%2Ctext_QDUxQ1RP5Y2a5a6i%2Ccolor_FFFFFF%2Ct_100%2Cg_se%2Cx_10%2Cy_10%2Cshadow_20%2Ctype_ZmFuZ3poZW5naGVpdGk%3D&refer=http%3A%2F%2Fs2.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655904203&t=226ac6b01fec2207c2176ca627d04684"></p><h3 id="4-5NAT"><a href="#4-5NAT" class="headerlink" title="4.5NAT"></a>4.5NAT</h3><p>网络地址转换实现：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F8%2Fcb31229877e8009e090a8ee605826928.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655904533&t=f6daf50b09482e2d5644b50e8c490c50"></p><p>NAT主要争议：</p><ul><li>路由器应该值处理第3层工功能</li><li>违背端到端通信原则，应用开发者必须考录到NAT的存在</li><li>地址短缺问题应该由IPv6来解决</li></ul><p>NAT穿透问题：</p><ul><li><p>解决方案一：静态配置 NAT 路由器的转换表。将特定端口的连接请求转发给服务器，如将目的地址为 138.76.29.7, 2500 的数据报总是转发给 10.0.0.1, 25000。</p></li><li><p>解决方案二：UPnP（Universal Plug and Play，通用即插即用） 互联网网关设备协议（IGD）自动配置。UPnP 协议实际上与第一种解决方案达到的目的是一样的，只不过手段不同（自动配置、手动配置）。UPnP 要求内网中的服务器（主机）和 NAT 路由器都是 UPnP 兼容的。</p></li><li><p>解决方案三：中继（如 Skype）。NAT 内部的客户与中继服务器建立连接，外部客户也与中继服务器建立连接，中继服务器桥接两个连接的分组，从而实现了 NAT 的穿透。</p></li></ul><h3 id="5-6ICMP协议"><a href="#5-6ICMP协议" class="headerlink" title="5.6ICMP协议"></a>5.6ICMP协议</h3><p>Internet Control Message Protocol：互联网控制报文协议</p><ul><li>差错报告报文：<ul><li>目的不可达</li><li>源一直</li><li>超时</li><li>参数问题</li><li>重定向</li></ul></li><li>网络探寻报文：<ul><li>回声请求与应答报文</li><li>时间戳请求与应答报文</li></ul></li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs2.ax1x.com%2F2020%2F02%2F12%2F1HKi8O.png&refer=http%3A%2F%2Fs2.ax1x.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655904956&t=7f8efe9066c01c5b4e9ba199b4bba140"></p><p>几种不发送ICMP差错报告报文的特殊情况：</p><ul><li>对ICMP差错报告报文不在发送ICMP差错报告报文</li><li>除第1个IP数据报分片外，对所有后续分片均不发送ICMP差错报告报文</li><li>对所有多播IP数据报均不发送ICMP差错报告报文</li><li>对具有特殊地址的IP数据报不发送ICMP差错报告报文</li></ul><p><strong>停止准则</strong>：</p><ul><li>UDP数据报最终到达目的主机</li><li>目的主机返回“目的端口不可达”ICMP报文</li><li>源主机停止</li></ul><h3 id="5-7IPv6"><a href="#5-7IPv6" class="headerlink" title="5.7IPv6"></a>5.7IPv6</h3><p>IPv6数据报格式：</p><ul><li>固定长度的40字节基本首部</li><li>不允许分片</li></ul><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs1.ax1x.com%2F2020%2F06%2F28%2FN2wTqf.png&refer=http%3A%2F%2Fs1.ax1x.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655905533&t=613e8cd5542a58eab978e967c33841b4" style="zoom:67%;"><p>相比IPv4的改变：</p><ul><li>彻底移除校验和，以减少每跳处理时间</li><li>允许选项，但是从基本首部移出，定义多个选项首部，通过“下一个首部”字段展示</li><li>新版ICMP：增加“Packet Too Big”，增加多播组管理功能</li><li>不再使用掩码</li></ul><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20201225115814453.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29saXZpYTEyMzQ0MzIx%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655905876&t=41c1f6d92b7f58511892e251cdb6669b" style="zoom:67%;"><p>IPv6可以采用单播、多播、任意播。</p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20200502194113582.png%3Fx-oss-process%3Dimage%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzMzNDk5%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655905960&t=85276887e26f18ba906aa3b78b84d403" style="zoom:67%;"><h3 id="5-8路由算法"><a href="#5-8路由算法" class="headerlink" title="5.8路由算法"></a>5.8路由算法</h3><p><strong>路由算法</strong>确定去往目的网络的最佳路径，寻找最小费用路径的算法</p><ul><li><p><strong>静态路由</strong>：手动配置，路由更新慢，优先级高</p></li><li><p><strong>动态路由</strong>：路由更新快，定期更新，及时响应链路费用或网络拓扑变化</p></li><li><p><strong>全局信息</strong>：所有路由器掌握完整的网络拓扑和链路费用信息，<strong>链路状态路由算法</strong></p></li><li><p><strong>分散信息</strong>：路由器只掌握物理连接的邻居以及链路费用，<strong>距离向量路由算法</strong></p></li></ul><h4 id="5-8-1链路状态路由算法"><a href="#5-8-1链路状态路由算法" class="headerlink" title="5.8.1链路状态路由算法"></a>5.8.1链路状态路由算法</h4><p>采用迪杰斯特拉算法</p><img src="http://mms1.baidu.com/it/u=917276260,888314558&fm=253&app=138&f=PNG&fmt=auto&q=75?w=1345&h=500" style="zoom:50%;"><h4 id="5-8-2距离向量路由算法"><a href="#5-8-2距离向量路由算法" class="headerlink" title="5.8.2距离向量路由算法"></a>5.8.2距离向量路由算法</h4><p><strong>距离向量路由算法</strong>是一种迭代的、异步的和分布式的算法。</p><ul><li>分布式：每个节点都从其直接相连邻居接受信息，进行计算，再将计算结果分发给邻居。</li><li>迭代：计算过程一直持续到邻居之间无更多信息交换为止。</li><li>异步：不要求所有节点相同之间步伐一致地操作。</li><li>自我终结：算法能自行停止。</li></ul><p><strong>对每个节点x</strong>：</p><ol><li>在每个节点建立自己的距离向量表并初始化。</li><li>在每个节点将自己维护的距离向量表向其邻居节点转发。</li><li>每个节点收到邻居节点发送的距离向量表以后基于新的信息采用方程来更新自己的距离向量表。</li><li>当自己的距离向量表发生变化时，将新的距离向量表发送给自己的邻居节点，如果与以前的向量表相同则不向其邻居节点转发，直到每个节点的距离向量表达到稳定为止。</li></ol><p><strong>链路费用变化</strong>：</p><ul><li>当费用减少时：好消息传播快</li><li>当费用增加时：坏消息传播慢，引申出“无穷计数”问题</li></ul><p><strong>无穷计数问题</strong>：</p><ol><li>毒性逆转：如果Z的最短路径要通过邻居Y，那么它将告诉Y自己到目的节点的距离是∞。这样，Z向Y撒了一个善意的谎言，使得只要Z经过Y选路到X，它就会一直持续讲述这个谎言，这样Y也就永远不会尝试从Z选路到X了，也就避免了环路问题。</li><li>定义最大度数：定义一个最大的有效费用值，如15跳步，16跳步表示∞。</li></ol><h4 id="5-8-3层次路由"><a href="#5-8-3层次路由" class="headerlink" title="5.8.3层次路由"></a>5.8.3层次路由</h4><p>聚合路由器为一个区域：<strong>自治系统AS</strong>（autonomous systems）</p><ul><li>同一AS内的路由器运行相同的路由协议/算法</li><li>不同自治系统内的路由器可以运行不同的AS内部路由协议</li></ul><p><strong>网关路由器</strong>：位于AS“边缘”，通过链路连接其他AS的网关路由器</p><p><strong>热土豆路由</strong>：在多AS间选择时，将分组发送给最近的网关路由器。</p><h3 id="5-9Internet路由"><a href="#5-9Internet路由" class="headerlink" title="5.9Internet路由"></a>5.9Internet路由</h3><p>Internet采用<strong>层次路由</strong></p><p>AS内部路由协议也称内部网络协议IGP</p><p>最常见的<strong>AS内部路由协议</strong>：</p><ul><li>路由信息协议：RIP（Routing Information Protocol）</li><li>开放最短路径优先：OSPF（Open Shortest Path First）</li><li>内部网关路由协议：IGRP（Interior Gateway Routing Protocol）,Cisco私有协议</li></ul><h4 id="5-9-1RIP协议"><a href="#5-9-1RIP协议" class="headerlink" title="5.9.1RIP协议"></a>5.9.1RIP协议</h4><p>采用<strong>距离向量路由算法</strong></p><ul><li>距离度量：跳步数（max = 15 hops），每条链路1个跳步</li><li>每隔30秒，邻居之间交换一次DV，成为<strong>通告</strong></li><li>每次通告：最多25个目的子网（IP地址形式）</li></ul><p>链路失效和恢复：</p><ul><li>如果180s没有收到通告，则邻居/链路失效</li></ul><p>RIP路由表是利用一个称作route-d的<strong>应用层</strong>进程进行管理，应用进程实现，通告报文周期性地通过UDP数据报发送。</p><h4 id="5-9-2OSPF协议"><a href="#5-9-2OSPF协议" class="headerlink" title="5.9.2OSPF协议"></a>5.9.2OSPF协议</h4><p>采用<strong>链路状态路由算法</strong>：</p><ul><li>LS分组扩散（通告）</li><li>每个路由器构造完整的网络拓扑</li><li>利用迪杰斯特拉算法计算路由</li></ul><p><strong>OSPF优点（RIP不具备）</strong>：</p><ul><li><strong>安全</strong>：所有OSPF报文可以被认证</li><li>允许使用<strong>多条</strong>相同的费用<strong>路径</strong>（RIP只能选择一条）</li><li>对于每条链路，可以针对不同的<strong>TOS</strong>设置多个不同的费用度量，可实现不同类型数据分组的分流</li><li>集成单播路由与多播路由</li><li>OSPF支持<strong>大规模AS分层</strong></li></ul><p>OSPF两级分层：局部区、主干区</p><p><img src="http://mms0.baidu.com/it/u=3978987848,1662011284&fm=253&app=138&f=PNG&fmt=auto&q=75?w=467&h=305"></p><h4 id="5-9-3BGP协议"><a href="#5-9-3BGP协议" class="headerlink" title="5.9.3BGP协议"></a>5.9.3BGP协议</h4><p>边界网关协议BGP（Border Gateway Protocol），事实上的标准域间路由协议，将Internrt“粘合”为一个整体的关键。</p><p>BGP为每个AS提供了一种手段：</p><ul><li>eBGP：从邻居AS获取子网可达性信息</li><li>iBGP：向所有AS内部路由器传播子网可达性信息</li><li>基于可达性信息与策略，确定到达其他网络的“好”路径</li></ul><p><strong>BGP会话</strong>：两个BGP路由器交换BGP报文</p><ul><li>通告去往不同目的<strong>前缀</strong>的<strong>路径</strong></li><li>报文交换基于半永久的TCP连接</li></ul><p><strong>BGP报文</strong>：</p><ul><li>OPEN：与peer建立TCP连接，并认证发送方</li><li>UPDATE：通告新路径（或撤销原路径）</li><li>KEEPALIVE：在无UPDATE时，保持连接；也用于对OPEN请求的确认</li><li>NOTIFICATION：报告先前报文的差错；也被用于关闭连接</li></ul><p><strong>网关路由器收到路由通告后，利用其输入策略(import policy)决策接受/拒绝该路由</strong></p><p><strong>路由器可能获知到达某目的AS的多条路由</strong>，基于以下准则选择:</p><ol><li>本地偏好(preference)值属性:策略决策</li><li>最短AS-PATH</li><li>最近NEXT-HOP路由器:热土豆路由</li><li>附加准则</li></ol><img src="http://mms1.baidu.com/it/u=3058319925,3367710645&fm=253&app=138&f=PNG&fmt=auto&q=75?w=1057&h=316" style="zoom:50%;"><ul><li>A,B,C是<strong>提供商网络</strong>(provider network/AS)x</li><li>W,Y是<strong>客户网络</strong>(customer network/AS)</li><li>W,Y是<strong>桩网络</strong>(stub network/AS):只与一个其他AS相连</li><li>X是<strong>双宿网络</strong>(dual-homed network/AS):连接两个其他AS</li></ul><p>B是否应该向C通告路径BAW？No，无任何收益</p><p><strong>为什么采用不同的AS内与AS间路由协议?</strong></p><ul><li><p>策略(policy):</p><ul><li><p>inter-AS:期望能够管理控制流量如何被路由，谁路由经过其网络等.</p></li><li><p>intra-AS:单一管理，无需策略决策</p></li></ul></li><li><p>规模(scale):</p><ul><li>层次路由节省路由表大小，减少路由更新流量</li><li>适应大规模互联网</li></ul></li><li><p>性能(performance):</p><ul><li>intra-AS:侧重性能</li><li>inter-AS:策略主导</li></ul></li></ul><h2 id="6-数据链路层"><a href="#6-数据链路层" class="headerlink" title="6.数据链路层"></a>6.数据链路层</h2><ul><li>主机和路由器:<strong>结点</strong></li><li>连接相邻结点的通信信道:<strong>链路</strong><ul><li>有线链路</li><li>无线链路</li><li>局域网</li></ul></li><li>链路层(第2层)数据分组:<strong>帧</strong>，封装网络层数据报</li></ul><p><strong>数据链路层</strong>负责通过一条链路从一个节点向另一个物理链路直接相连的相邻结点传送数据报。</p><p><strong>链数据路层服务</strong>：</p><ul><li><strong>组帧</strong>：封装数据报构成数据帧，加首部和尾部；帧同步</li><li><strong>链路接入</strong>：如果是共享介质，需要解决信道接入；帧首部中的“MAC”地址，用于标识帧的源和目的（不同于IP地址!）</li><li><strong>相邻结点间可靠交付</strong>：在低误码率的有线链路上很少采用(如光纤，某些双绞线等)；无线链路:误码率高，需要可靠交付</li><li><strong>流量控制</strong>：协调相邻的发送结点和接收</li><li><strong>差错检测</strong>：信号衰减和噪声会引起差错；接收端检测到差错，通知发送端重传或者直接丢弃帧</li><li><strong>差错纠正</strong>：接收端直接纠正比特差错</li><li><strong>全双工和半双工通信控制</strong>：<ul><li>全双工：链路两端结点同时双向传输</li><li>半双工：链路两端结点交替双向传输</li></ul></li></ul><h3 id="6-1差错编码"><a href="#6-1差错编码" class="headerlink" title="6.1差错编码"></a>6.1差错编码</h3><p>差错编码基本原理：D -&gt; DR，其中R为差错检测与纠正比特（冗余比特）（监督位）</p><p>差错编码不能保证100%可靠！</p><img src="http://mms0.baidu.com/it/u=3871246119,357947636&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=847&h=500" style="zoom:50%;"><p>差错编码可分为<strong>检错码</strong>与<strong>纠错码</strong></p><ul><li>对于<strong>检错码</strong>，如果编码集的汉明距离d = r+1，则该差错编码可以检测 r 位的差错</li><li>对于<strong>纠错码</strong>，如果编码集的汉明距离d = 2r+1，则该差错编码可以纠正 r 位的差错</li></ul><p>校验有 奇偶校验码、Internet校验和、循环冗余校验码（CRC）</p><h3 id="6-2多路访问控制协议MAC"><a href="#6-2多路访问控制协议MAC" class="headerlink" title="6.2多路访问控制协议MAC"></a>6.2多路访问控制协议MAC</h3><p>两类链路：点对点链路，广播链路（共享介质）</p><p><strong>理想MAC协议</strong> 给定:速率为R bps的广播信道期望:</p><ol><li>当只有一个结点希望传输数据时，它可以以速率R发送.</li><li>当有M个结点期望发送数据时，每个节点平均发送数据的平均速率是R/M</li><li>完全分散控制：无需特定结点协调，无需时钟、时隙同步</li><li>简单</li></ol><p><strong>MAC协议三大类</strong>：</p><ul><li><strong>信道划分</strong>(channel partitioning)MAC协议<ul><li>多路复用技术</li><li>TDMA、FDMA、CDMA、WDMA等</li></ul></li><li><strong>随机访问</strong>(random access)MAC协议<ul><li>信道不划分，允许冲突</li><li>采用冲突“恢复”机制</li></ul></li><li><strong>轮转</strong>(“taking turns”)MAC协议<ul><li>结点轮流使用信道</li></ul></li></ul><h4 id="6-2-1信道划分MAC协议"><a href="#6-2-1信道划分MAC协议" class="headerlink" title="6.2.1信道划分MAC协议"></a>6.2.1信道划分MAC协议</h4><h4 id="6-2-2随机访问MAC协议"><a href="#6-2-2随机访问MAC协议" class="headerlink" title="6.2.2随机访问MAC协议"></a>6.2.2随机访问MAC协议</h4><p>典型的随机访问MAC协议：</p><ul><li>时隙(sloted)ALOHA</li><li>ALOHA</li><li>CSMA、CSMA/CD、CSMA/CA</li></ul><p><strong>时隙ALOHA协议</strong>：</p><p>优点：</p><ul><li>单个结点活动时，可以连续以信道全部速率传输数据</li><li>高度分散化：只需同步时隙</li><li>简单</li></ul><p>缺点：</p><ul><li>冲突，浪费时隙</li><li>空闲时隙</li><li>结点也许能以远小于分组传输时间检测到冲突</li><li>时钟同步</li></ul><p>最好情况：信道被成功利用的时间占37%</p><p><strong>ALOHA协议</strong>：</p><ul><li>更加简单，无需同步</li><li>当有新的帧生成时立即发送</li><li>冲突可能性增大，在to时刻发送帧，会与在[to-1, to+1]期间其他结点发送的帧冲突</li></ul><p>最好情况：信道被成功利用的时间占18%</p><p><strong>CSMA协议</strong>：<strong>载波监听多路访问协议</strong></p><p>发送帧之前，监听信道(载波):</p><ul><li><p>信道空闲:发送完整帧</p></li><li><p>信道忙:推迟发送</p><ul><li><p>1-坚持CSMA</p></li><li><p>非坚持CSMA</p></li><li><p>P-坚持CSMA</p></li></ul></li><li><p>冲突可能仍然发生：信号传播延迟</p></li></ul><p><strong>CSMA/CD协议</strong>：</p><p>短时间内可以检测到冲突，中突后传输中止，减少信道浪费</p><p><strong>冲突检测</strong>：</p><ul><li>有线局域网易于实现:测量信号强度，比较发射信号与接收信号</li><li>无线局域网很难实现：接收信号强度淹没在本地发射信号强度下</li></ul><p><strong>“边发边听，不发不听”</strong></p><p>网络带宽:R 单位 bps</p><p>数据帧最小长度:L(min) 单位 bits</p><p>信号传播速度:V 单位 m/s</p><p>L(min) / R = 2*d(max) / V</p><p>L(min) / R = RTT(max)</p><p>t(prop)趋近于0或者t(trans)趋近于oo 时，效率趋近于1</p><p>远优于ALOHA，并且简单、分散!</p><h4 id="6-2-3轮转MAC协议"><a href="#6-2-3轮转MAC协议" class="headerlink" title="6.2.3轮转MAC协议"></a>6.2.3轮转MAC协议</h4><p><strong>轮询</strong>(polling)：主结点轮流“激请”从属结点发送数据</p><p>问题:</p><ul><li>轮询开销</li><li>等待延迟</li><li>单点故障</li></ul><p><strong>令牌传递</strong>(token passing)：控制令牌依次从一个结点传递到下一个结点，令牌为特殊帧</p><p>问题：</p><ul><li>令牌开销</li><li>等待延迟</li><li>单点故障</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络（一）</title>
    <link href="/2022/05/23/NetOfCom_1/"/>
    <url>/2022/05/23/NetOfCom_1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1.计算机网络概述"></a>1.计算机网络概述</h2><p>计算机网络是<strong>通信技术</strong>与<strong>计算机技术</strong>紧密结合的产物。</p><p>计算机网络就是<strong>互连的</strong>、<strong>自治的</strong>计算机集合。</p><p><strong>自治</strong>-无主从关系；<strong>互连</strong>-互联互通</p><h3 id="1-1什么是Internet？——组成细节角度"><a href="#1-1什么是Internet？——组成细节角度" class="headerlink" title="1.1什么是Internet？——组成细节角度"></a>1.1什么是Internet？——组成细节角度</h3><ul><li>数以百万计的互连的<strong>计算设备</strong>集合：主机、运行各种网络应用..</li><li><strong>通信链路</strong>：光纤、铜缆、无线电、卫星..</li><li><strong>分组交换</strong>：路由器（routers）、交换机（switches）</li></ul><h3 id="1-2什么是Internet？——服务角度"><a href="#1-2什么是Internet？——服务角度" class="headerlink" title="1.2什么是Internet？——服务角度"></a>1.2什么是Internet？——服务角度</h3><ul><li>为网络应用提供通信服务的通信基础设施</li><li>为网络应用提供应用编程接口（API）</li></ul><h3 id="1-3计算机网络结构"><a href="#1-3计算机网络结构" class="headerlink" title="1.3计算机网络结构"></a>1.3计算机网络结构</h3><img src="http://mms2.baidu.com/it/u=131446220,1729982940&fm=253&app=138&f=PNG&fmt=auto&q=75?w=445&h=462" style="zoom:80%;"><ul><li><strong>网络边缘</strong>：主机、网络应用</li><li><strong>接入网络、物理介质</strong>：有线或无线通信链路</li><li><strong>网络核心（核心网络）</strong>：互连的路由器（或分组转发设备），网络</li></ul><h3 id="1-4数据交换"><a href="#1-4数据交换" class="headerlink" title="1.4数据交换"></a>1.4数据交换</h3><p>为什么需要数据交换？</p><ol><li>N^2链路问题</li><li>连通性</li><li>网络规模</li></ol><p>数据交换的类型：</p><ul><li>电路交换</li><li>报文交换</li><li>分组交换</li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20200528152333799.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3picF8xMjEzOA%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655474844&t=253794e535460e2f74c8db7e0bdacb58"></p><h4 id="1-4-1电路交换"><a href="#1-4-1电路交换" class="headerlink" title="1.4.1电路交换"></a>1.4.1电路交换</h4><p>电路交换的特点：独占资源; 最典型的电路交换网络：电话网络</p><p>电路交换的三个阶段：</p><ol><li>建立连接（呼叫 / 电路建立）</li><li>通信</li><li>释放资源（挂断 / 拆除电路）</li></ol><p>典型的多路复用方法：</p><ul><li>频分多路复用（FDM）</li><li>时分多路复用（TDM）</li><li>波分多路复用（WDM）</li><li>码分多路复用（CDM）</li></ul><h4 id="1-4-2报文交换"><a href="#1-4-2报文交换" class="headerlink" title="1.4.2报文交换"></a>1.4.2报文交换</h4><p>报文：源（应用）发送信息整体，比如:一个文件</p><p>采用存储-转发交换方式：以完整报文进行“存储-转发”</p><h4 id="1-4-3分组交换"><a href="#1-4-3分组交换" class="headerlink" title="1.4.3分组交换"></a>1.4.3分组交换</h4><p>分组：报文分拆出来的一系列相对较小的数据包</p><p>分组交换需要报文的拆分与重组，会产生额外开销。使用统计多路复用，按需共享链路，采用存储-转发交换方式，以较小的分组进行“存储-转发”，适用于<strong>突发</strong>数据传输网络。</p><p>分组交换的缺点：可能产生拥塞：分组延迟和丢失（需要协议处理可靠数据传输和拥塞控制）</p><p><strong>分组交换的报文交付时间：</strong></p><p>报文：M bits ；链路带宽（数据传输速率）：R bps ；分组长度：L bits ；跳步数：h ；路由器数：n</p><p>分组交换交付时间：**T = M/R+(h-1)L/R = M/R+nL/R **（时间更短）</p><p>报文交换交付时间：<strong>T = h * M/R</strong></p><h3 id="1-5计算机网络性能"><a href="#1-5计算机网络性能" class="headerlink" title="1.5计算机网络性能"></a>1.5计算机网络性能</h3><ul><li><strong>速率</strong>（数据传输速率）：单位时间（秒）传输信息（bits）量，速率往往是指额定速率或标称速率</li><li><strong>带宽</strong>：最高数据率，单位b/s（bps）</li><li><strong>时延</strong>：结点处理延迟、排队延迟、传输延迟、传播延迟</li><li><strong>时延带宽积</strong>：传播时延*带宽 = d * R（bits）</li><li><strong>丢包率</strong>：丢包数/已发分组总数</li><li><strong>吞吐量</strong>：表示在发送端与接收端之间传输数据速率（b/s）</li></ul><h3 id="1-6分层网络体系结构基本概念"><a href="#1-6分层网络体系结构基本概念" class="headerlink" title="1.6分层网络体系结构基本概念"></a>1.6分层网络体系结构基本概念</h3><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F83a5b1d81b80ba3574460f4435df5d94.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655541311&t=222e5277d466ec03fa7f12ca8e533bc0" style="zoom:67%;"><ul><li><strong>实体</strong>表示任何可发送或接受信息的硬件或软件进程。</li><li><strong>协议</strong>是控制<strong>两个对等实体</strong>进行通信的规则的集合，协议是“水平的”。</li><li>任一层实体需要使用<strong>下层</strong>服务，遵循本层协议，实现本层功能，向<strong>上层</strong>提供服务，服务是“<strong>垂直的</strong>”。</li><li>下层协议的实现对上层的服务用户是<strong>透明</strong>的。</li><li>同系统的相邻层实体间通过<strong>接口</strong>进行交互，通过<strong>服务访问节点SAP</strong>，交换<strong>原语</strong>，指定请求的特定服务。</li></ul><h3 id="1-7OSI参考模型"><a href="#1-7OSI参考模型" class="headerlink" title="1.7OSI参考模型"></a>1.7OSI参考模型</h3><p>​    OSI（Open System Interconnect），即开放式系统互联。 一般都叫 OSI 参考模型，是 ISO（国际标准化组织）组织在 1985 年研究的网络互连模型。<br>​    ISO 为了更好的使网络应用更为普及，推出了 OSI 参考模型。其含义就是推荐所有公司使用这个规范来控制网络。这样所有公司都有相同的规范，就能互联了。</p><p><img src="http://mms0.baidu.com/it/u=3004462548,426914923&fm=253&app=138&f=PNG&fmt=auto&q=75?w=681&h=411"></p><p><img src="http://mms1.baidu.com/it/u=3908315332,2599787693&fm=253&app=138&f=PNG&fmt=auto&q=75?w=616&h=341"></p><h4 id="1-7-1为什么需要数据封装？"><a href="#1-7-1为什么需要数据封装？" class="headerlink" title="1.7.1为什么需要数据封装？"></a>1.7.1为什么需要数据封装？</h4><p>增加<strong>控制信息</strong>，构成协议数据单元（PDU），控制信心主要包括：</p><ul><li><strong>地址</strong>：标识发送端/接收端</li><li><strong>差错检测编码</strong>：用于差错检测或纠正</li><li><strong>协议控制</strong>：实现协议功能的附加信息，如：优先级、服务质量、安全控制等</li></ul><h4 id="1-7-2七层模型各层功能"><a href="#1-7-2七层模型各层功能" class="headerlink" title="1.7.2七层模型各层功能"></a>1.7.2七层模型各层功能</h4><ol><li>物理层<ul><li>接口特性：机器特性、电气特性、功能特性、规程特性</li><li>比特编码</li><li>数据率</li><li>比特同步：时钟同步</li><li>传输模式：单工、半双工、全双工</li></ul></li><li>数据链路层<ul><li>负责 结点-结点 数据传输</li><li>组帧：加头加尾</li><li>物理寻址：在帧头中增加发送端和接收端的物理地址标识数据帧在发送端和接收端</li><li>流量控制：避免淹没接收端</li><li>差错控制：检测并重传损坏或丢失帧，并避免重复帧</li><li>访问（接入）控制：在任一给定的时刻决定哪个设备拥有链路（物理介质）控制使用权</li></ul></li><li>网络层<ul><li>负责 源主机到目的主机 数据分组交付，可能穿越多个网络 </li><li>逻辑寻址：全局唯一逻辑地址，确保数据分组被送达目的主机，如IP地址</li><li>路由：路由器（或网关）互连网络，并路由分组值最终目的主机，路径选择</li><li>分组转发</li></ul></li><li>传输层<ul><li>负责 源目的（端到端）（进程间）完整报文传输</li><li>分段与重组</li><li>SAP寻址：确保将完整报文提交给正确进程，如端口号</li><li>连接控制</li><li>流量控制</li><li>差错控制</li></ul></li><li>会话层<ul><li>对话控制：建立、维护</li><li>同步：在数据流中插入“同步点”</li><li>最“薄”的一层</li></ul></li><li>表示层<ul><li>数据表示转化：转化为主机独立的编码</li><li>加密/解密</li><li>压缩/解压缩</li></ul></li><li>应用层<ul><li>支持用户通过用户代理（如浏览器）或网络接口使用网络（服务）</li><li>典型应用层服务：文件传输（FTP）、电子邮件（SMTP）、Web（HTTP）</li></ul></li></ol><h3 id="1-8TCP-IP四层参考模型"><a href="#1-8TCP-IP四层参考模型" class="headerlink" title="1.8TCP/IP四层参考模型"></a>1.8TCP/IP四层参考模型</h3><img src="http://mms2.baidu.com/it/u=2576445434,1369439252&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=667&h=500" style="zoom:80%;"><h3 id="1-9五层参考模型"><a href="#1-9五层参考模型" class="headerlink" title="1.9五层参考模型"></a>1.9五层参考模型</h3><img src="http://mms2.baidu.com/it/u=3287896326,1934610719&fm=253&app=138&f=JPEG&fmt=auto&q=75?w=868&h=500" style="zoom:80%;"><h2 id="2-应用层"><a href="#2-应用层" class="headerlink" title="2.应用层"></a>2.应用层</h2><h3 id="2-1网络应用"><a href="#2-1网络应用" class="headerlink" title="2.1网络应用"></a>2.1网络应用</h3><p>网络应用的体系结构：</p><ul><li>Client-Server (C/S)</li><li>Peer-Peer (P2P)</li><li>Hybrid</li></ul><p>不同主机上运行的进程间如何通信？消息交换：</p><ul><li>进程间通信利用socket发送/接收消息实现</li><li>传输基础设施向进程提供API</li></ul><p>如何寻址进程？通过进程的标识符：IP地址+端口号</p><h3 id="2-2Web应用"><a href="#2-2Web应用" class="headerlink" title="2.2Web应用"></a>2.2Web应用</h3><h4 id="2-2-1HTTP（Hyper-Text-Transfer-Protocol）协议无状态"><a href="#2-2-1HTTP（Hyper-Text-Transfer-Protocol）协议无状态" class="headerlink" title="2.2.1HTTP（Hyper Text Transfer Protocol）协议无状态"></a>2.2.1HTTP（Hyper Text Transfer Protocol）协议无状态</h4><p>对象的寻址：URL（Uniform Resource Locator）统一资源定位器，例如，Scheme://host:post/path</p><p><strong>HTTP 1.0</strong>：非持久性连接，每个TCP连接最多允许传输一个对象</p><p><strong>HTTP 1.1</strong>：持久性连接，每个TCP连接允许传输多个对象，默认使用持久性连接</p><p><strong>RTT</strong>：从客户端发送一个很小的数据包到服务器并返回所经历的时间（Round Trip Time）</p><p><strong>无流水持久性连接</strong>：客户端只有收到前一个响应后才发送新的请求，每个被引用的对象耗时1个RTT</p><p><strong>流水持久性连接</strong>：HTTP 1.1默认，客户端只要遇到一个引用对象就尽快发送请求，理想状态下，收到所有引用对象只需耗时1个RTT</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fcdn.bianchengquan.com%2F3c7781a36bcd6cf08c11a970fbe0e2a6%2Fblog%2F5ff9dfc9a4d96.png&refer=http%3A%2F%2Fcdn.bianchengquan.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655643241&t=cfd8a89a1649920361c6603221e8befc"></p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fi-beta%2F1971101%2F202003%2F1971101-20200318145659168-1438638013.png&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655643305&t=8c4dc96be1205ac0d8e3cf43b8aa2df7"></p><p><strong>HTTP请求类型：</strong></p><ol><li>opions：返回服务器针对特定资源所支持的HTML请求方法  或web服务器发送*测试服务器功能（允许客户端查看服务器性能）</li><li>Get：向特定资源发出请求（请求指定页面信息，并返回实体主体）</li><li>Post：向指定资源提交数据进行处理请求（提交表单、上传文件），又可能导致新的资源的建立或原有资源的修改</li><li>Put：向指定资源位置上上传其最新内容（从客户端向服务器传送的数据取代指定文档的内容）</li><li>Head：HEAD就像GET，只不过服务端接受到HEAD请求后只返回响应头，而不会发送响应内容。当我们只需要查看某个页面的状态的时候，使用HEAD是非常高效的，因为在传输的过程中省去了页面内容。</li><li>Delete：请求服务器删除request-URL所标示的资源*（请求服务器删除页面）</li><li>Trace：回显服务器收到的请求，主要用于测试和诊断</li><li>Connect：HTTP/1.1协议中能够将连接改为管道方式的代理服务器</li></ol><h4 id="2-2-2Web缓存-代理服务技术"><a href="#2-2-2Web缓存-代理服务技术" class="headerlink" title="2.2.2Web缓存/代理服务技术"></a>2.2.2Web缓存/代理服务技术</h4><p>Web缓存/代理服务技术的功能：在不访问的服务器的前提下满足客户端的HTTP请求。</p><p><img src="https://ss1.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/baike/s%3D250/sign=309ea5659822720e7fcee5ff4bca0a3a/96dda144ad3459828bdee5950cf431adcbef8464.jpg"></p><p>为什么要发明这项技术？</p><ul><li>缩短客户请求的响应时间</li><li>减少机构/组织的流量</li><li>在大范围内实现有效的内容分发</li></ul><p>条件性GET方法:</p><ul><li>目标：如果缓存有最新版本，则不需要发送请求对象</li><li>缓存：在HTTP请求消息中声明所持有版本的日期 If-modified-since:&lt;date&gt;</li><li>服务器：如果缓存版本是最新的，则响应消息中不包含对象 HTTP/1.1 304 Not Modified</li></ul><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.it610.com%2Fimage%2Finfo8%2F37f41387a66b4ea584ce3bd035cecaf0.jpg&refer=http%3A%2F%2Fimg.it610.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655644896&t=69f08ced09af4474323a828e8baeb7cb" style="zoom:80%;"><h3 id="2-3Email应用"><a href="#2-3Email应用" class="headerlink" title="2.3Email应用"></a>2.3Email应用</h3><p>Email应用的构成组件：</p><ul><li>邮件客户端：读写Email消息，与服务器交互，收、发Email消息</li><li>邮件服务器：<ul><li>邮箱：存储发给用户的Email</li><li>消息队列：存储等待发送的Email</li></ul></li><li>SMTP协议：<ul><li>邮件服务器之间传递消息所使用的协议</li><li>客户端：发送消息的服务器</li><li>服务器：接收消息的服务器</li></ul></li></ul><p>SMTP交互示例：</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F322%2Fccd7ba8df97be0038e5c25e60f817d2a.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655646949&t=6f7f3811096fcde35936d3bb23819b74"></p><p>POP3：邮件访问协议，从服务器获取邮件，是无状态的</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.icode9.com%2Fimg%2Fll%2F%3Fi%3D20200229154154312.png%3F%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N5emRldg%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fwww.icode9.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655646859&t=b65b1de6513c8bd9d9dbd6569be0eb3c"></p><h3 id="2-4DNS应用"><a href="#2-4DNS应用" class="headerlink" title="2.4DNS应用"></a>2.4DNS应用</h3><p>DNS服务：</p><ul><li>域名向IP地址的翻译</li><li>主机别名</li><li>邮件服务器别名</li><li>负载均衡：Web服务器</li></ul><p>为什么不使用集中式的DNS？</p><ul><li>单点失败问题</li><li>流量问题</li><li>距离问题</li><li>维护性问题</li></ul><h4 id="2-4-1分布式层次数据库"><a href="#2-4-1分布式层次数据库" class="headerlink" title="2.4.1分布式层次数据库"></a>2.4.1分布式层次数据库</h4><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fmatemaster9%2Fimgs-masterstudio%2Fimgs%2F20210328145741.jpg&refer=http%3A%2F%2Fcdn.jsdelivr.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655712412&t=ad253d550a4f0cb5ad177059d5e9939f"></p><p>顶级域名服务器：负责com、org、net、edu等顶级域名和cn、uk、fr等国家顶级域名。</p><p>权威域名服务器：组织的域名解析服务器，提供组织内部服务器的解析服务。</p><p>本地域名解析服务器：</p><ul><li>不严格属于层次体系</li><li>每个ISP有一个本地域名服务器，默认域名解析服务器</li><li>当主机进行DNS查询时，查询被发送到本地域名服务器，作为代理，将查询转发给域名解析服务器系统</li></ul><h4 id="2-4-2DNS查询"><a href="#2-4-2DNS查询" class="headerlink" title="2.4.2DNS查询"></a>2.4.2DNS查询</h4><ol><li>迭代查询</li><li>递归查询</li></ol><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20201026004906489.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2EzMTkyMDQ4%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655712862&t=568850385599be218d1c191753035960"></p><p>只要域名解析服务器获得 域名-IP 映射，即缓存这一映射</p><ul><li>一段时间过后，缓存条目失效（删除）</li><li>本地域名服务器一般会缓存顶级域名服务器的映射，因此根域名服务器不经常被访问</li></ul><h4 id="2-4-3DNS记录"><a href="#2-4-3DNS记录" class="headerlink" title="2.4.3DNS记录"></a>2.4.3DNS记录</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">RR <span class="hljs-keyword">format</span>: (<span class="hljs-keyword">name</span>, <span class="hljs-keyword">value</span>, <span class="hljs-keyword">type</span>, ttl)<br></code></pre></td></tr></table></figure><ol><li>Type=A<ul><li>Name：主机域名</li><li>Value：IP地址</li></ul></li><li>Type=NS<ul><li>Name：域（edu.cn）</li><li>Value：该域权威域名解析服务器的主机域名</li></ul></li><li>Type=CNAME<ul><li>Name：某一真实域名的别名</li><li>Value：真实域名</li></ul></li><li>Type=MX<ul><li>Value是与Name相对应的邮件服务器</li></ul></li></ol><p><img src="http://mms2.baidu.com/it/u=2124260040,1623853326&fm=253&app=138&f=PNG&fmt=auto&q=75?w=1142&h=489"></p><h3 id="2-5P2P应用"><a href="#2-5P2P应用" class="headerlink" title="2.5P2P应用"></a>2.5P2P应用</h3><h3 id="2-6Socket编程"><a href="#2-6Socket编程" class="headerlink" title="2.6Socket编程"></a>2.6Socket编程</h3><h2 id="3-传输层"><a href="#3-传输层" class="headerlink" title="3.传输层"></a>3.传输层</h2><p>传输层协议为运行在不同host上的<strong>进程</strong>提供了一种逻辑通信机制</p><p>端系统运行传输层协议：</p><ul><li><strong>发送方</strong>：将应用递交的消息分成一个或多个的Segment，并向下传给网络层。</li><li><strong>接收方</strong>：将接收到的Segment组装成消息，并向上交给应用层。</li></ul><p>传输层提供的协议：TCP、UDP</p><h3 id="3-1多路复用和多路分用"><a href="#3-1多路复用和多路分用" class="headerlink" title="3.1多路复用和多路分用"></a>3.1多路复用和多路分用</h3><p>如果某层的一个协议对应直接上层的多个协议或实体，则需要复用/分用。</p><ul><li>接收端进行多路分用</li><li>发送端进行多路复用</li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F448%2Faeaaeede8eb494817edd75da3116a728.png&refer=http%3A%2F%2Fwww.pianshen.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655727312&t=5eeedc98c9628ab76473af9e06cb299c"></p><h3 id="3-2UDP"><a href="#3-2UDP" class="headerlink" title="3.2UDP"></a>3.2UDP</h3><p>UDP协议基于 Internet IP协议，实现复用/分用，简单的错误校验。“Best effort”</p><p>UDP为什么存在？</p><ol><li>无需建立连接（减少延迟）</li><li>实现简单，无需维护连接状态</li><li>头部开销小（8个字节）</li><li>没有拥塞控制；应用可更好地控制发送时间和速率</li></ol><p>UDP协议应用场景：容忍丢失、速率敏感；DNS、SNMP</p><p>若要在UDP上实现可靠数据传输，需在应用层增加可靠性机制，应用特定的错误恢复机制。</p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.136.la%2F20210813%2F448b2774c2fd4ba9a840594f2ab7ff3c.jpg&refer=http%3A%2F%2Fimg.136.la&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655728541&t=2986892d88f1f5bcb29fed1dfc5103de" style="zoom:50%;"><p><img src="http://mms2.baidu.com/it/u=3803683018,641018296&fm=253&app=138&f=PNG&fmt=auto&q=75?w=763&h=237"></p><h3 id="3-3可靠的数据传输"><a href="#3-3可靠的数据传输" class="headerlink" title="3.3可靠的数据传输"></a>3.3可靠的数据传输</h3><p>什么是可靠？不丢、不错、不乱</p><h4 id="3-3-1RDT1-0"><a href="#3-3-1RDT1-0" class="headerlink" title="3.3.1RDT1.0"></a>3.3.1RDT1.0</h4><p>底层信道完全可靠：不会发生错误、不会丢弃分组</p><img src="https://img-blog.csdnimg.cn/img_convert/4275e4320ab1f521e51197ddddcf262c.png" style="zoom:80%;"><h4 id="3-3-2RDT2-0"><a href="#3-3-2RDT2-0" class="headerlink" title="3.3.2RDT2.0"></a>3.3.2RDT2.0</h4><p>引入机制：</p><ul><li>利用<strong>校验和</strong>检测为错误</li><li>接收方反馈控制消息：ACK/NAK</li><li>重传</li></ul><img src="https://img-blog.csdnimg.cn/img_convert/626de5ac157a14dfdafc0701b4ace303.png" style="zoom:80%;"><h4 id="3-3-3RDT2-1"><a href="#3-3-3RDT2-1" class="headerlink" title="3.3.3RDT2.1"></a>3.3.3RDT2.1</h4><p>引入机制：</p><ul><li>序列号：发送反给每个分组增加序列号</li><li>接收方丢弃重复分组</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/ebd26a28cf9768b83b25690cffabb2aa.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/37d2ce6f0e240ce6c5648200aa9bafb6.png"></p><h4 id="3-3-4RDT2-2"><a href="#3-3-4RDT2-2" class="headerlink" title="3.3.4RDT2.2"></a>3.3.4RDT2.2</h4><p>无NAK消息协议</p><p><img src="https://img-blog.csdnimg.cn/img_convert/866e41d6c8283302558fed17ec25f50b.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/91bd06b07731210e4d068fad4cc3a750.png"></p><h4 id="3-3-5RDT3-0"><a href="#3-3-5RDT3-0" class="headerlink" title="3.3.5RDT3.0"></a>3.3.5RDT3.0</h4><p>引入机制：</p><ul><li>定时器</li></ul><img src="https://img-blog.csdnimg.cn/img_convert/d076370afd24d4ada1b1a7ef17fb9bfc.png" style="zoom:80%;"><h3 id="3-4流水线机制与滑动窗口协议"><a href="#3-4流水线机制与滑动窗口协议" class="headerlink" title="3.4流水线机制与滑动窗口协议"></a>3.4流水线机制与滑动窗口协议</h3><img src="http://mms0.baidu.com/it/u=241718618,1602109879&fm=253&app=138&f=JPG&fmt=auto&q=75?w=750&h=315" style="zoom:67%;"><h4 id="3-4-1GBN（Go-Back-N）回退N步"><a href="#3-4-1GBN（Go-Back-N）回退N步" class="headerlink" title="3.4.1GBN（Go-Back-N）回退N步"></a>3.4.1GBN（Go-Back-N）回退N步</h4><p><img src="https://img-blog.csdnimg.cn/67600e29552f4ad1a85d88f6b58284a3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUGFyYW5vaWTimIY=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/d6aa81eb0c7f4522bd5b267f699b1ba5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUGFyYW5vaWTimIY=,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="3-4-2SR（Selective-Repeat）选择重传"><a href="#3-4-2SR（Selective-Repeat）选择重传" class="headerlink" title="3.4.2SR（Selective Repeat）选择重传"></a>3.4.2SR（Selective Repeat）选择重传</h4><ol><li>接收方对每个分组单独进行确认, 设置缓存机制，为了缓存乱序到达的分组，发送方就不会再次发送，限制已发送且未确认的分组发送/接收方窗口</li><li>如果计时器到点, 仅重传该个未确认的数据报</li><li>发送方窗口，N个连续的序列号， 发送者在流水线中最多有 N 个未确认的数据报</li></ol><p>序列号空间大小与窗口尺寸需满足：</p><img src="https://img-blog.csdnimg.cn/89b5801980b5411c8f620cc0e0cb2d3e.png" style="zoom:50%;"><p><img src="https://img-blog.csdnimg.cn/20200920154056982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODEyMjA1,size_16,color_FFFFFF,t_70"></p><h3 id="3-5TCP"><a href="#3-5TCP" class="headerlink" title="3.5TCP"></a>3.5TCP</h3><p>TCP概述：</p><ul><li>点对点：一个发送方，一个接收方</li><li>可靠的、按序的字节流</li><li>流水线机制：TCP拥塞控制和流量控制机制设置窗口大小</li><li>发送方/接收方缓存</li><li>全双工：同一连接中能够传输双向数据流</li><li>面向连接:通信双方在发送数据前必须建立连接，连接状态只在连接的两端中维护，在沿途结点中并不维护</li><li>流量控制机制</li></ul><p>如果sender收到对同一数据的3个ACK，则假定该数据之后的段已经丢失，进行<strong>快速重传</strong>，在定时器超时之前进行重传。</p><h4 id="3-5-1TCP流量控制"><a href="#3-5-1TCP流量控制" class="headerlink" title="3.5.1TCP流量控制"></a>3.5.1TCP流量控制</h4><p>避免：接收方为TCP连接分配buffer，上层应用可能处理buffer中数据的速度较慢，且发送方传输数据太多太快以至于淹没接收方。</p><p>RcvWindow = RcvBuffer - (LastByteRcvd - LastByteRead)</p><ol><li>Receiver通过Segment的头部字段将RcvWindow告诉Sender</li><li>Sender限制自己已经发送的但还未收到ACK的数据不超过接收方的空闲RcvWindow尺寸</li><li>如果Receiver告诉Sender：RcvWindow=0，Sender也可以极小的消息</li></ol><h4 id="3-5-2TCP连接管理"><a href="#3-5-2TCP连接管理" class="headerlink" title="3.5.2TCP连接管理"></a>3.5.2TCP连接管理</h4><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.136.la%2F20210608%2Fcdca2ce2f18c4961898582f415ecd357.jpg&refer=http%3A%2F%2Fimg.136.la&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655796259&t=6b2f4b1095d92378a0b30ad1ca6dc5d5" style="zoom:50%;"><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fs3.51cto.com%2Fimages%2Fblog%2F202106%2F02%2F8a91ec6dfac558a229c7ac48f3f5682a.png&refer=http%3A%2F%2Fs3.51cto.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655796357&t=3ae47ac94b2f97b92ee26fd73063cfc3" style="zoom:67%;"><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fview-cache.book118.com%2Fview13%2FM03%2F33%2F39%2FwKh2D1_32pKAfuBIAABf4uDHv80888.png&refer=http%3A%2F%2Fview-cache.book118.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655796208&t=1c7931df6242cdbc6644c2e3e60aae09"></p><h3 id="3-6拥塞控制"><a href="#3-6拥塞控制" class="headerlink" title="3.6拥塞控制"></a>3.6拥塞控制</h3><p>拥塞控制表现：</p><ul><li>分组丢失（路由器缓存溢出）</li><li>分组延迟过大（在路由器缓存中排队）</li></ul><p>拥塞的代价：</p><ul><li>拥塞时分组延迟太大</li><li>造成资源的浪费</li><li>当分组被drop时，任何用于该分组的“上游”传输能力全都被浪费</li></ul><p>拥塞控制的方法：</p><ul><li>端到端拥塞控制：网络层不需要显式地提供支持，如TCP</li><li>网络辅助的拥塞控制：路由器向发送方显式地反馈网络拥塞信息，如ABR、RM</li></ul><h4 id="3-6-1TCP拥塞控制"><a href="#3-6-1TCP拥塞控制" class="headerlink" title="3.6.1TCP拥塞控制"></a>3.6.1TCP拥塞控制</h4><ul><li><p>When CongWin is <strong>below</strong> Threshold, sender in <strong>slow-start</strong> phase, window grows exponentially.</p></li><li><p>When CongWin is <strong>above</strong> Threshold, sender in <strong>congestion-avoidance</strong> phase, window grows linearly.</p></li><li><p>When a <strong>triple duplicate ACK</strong> occurs,Threshold <strong>set to</strong> CongWin/2 and CongWin <strong>set to</strong> Threshold.</p></li><li><p>When <strong>timeout</strong> occurs,Threshold <strong>set to</strong> CongWin/2 and CongWin <strong>set to</strong> 1 MSS.</p></li></ul><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20200223191307824.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTE1NjA2%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1655797492&t=bd76c439b0da6b36ea94afdd357d6413"></p><h4 id="3-6-2TCP-throughput：吞吐率"><a href="#3-6-2TCP-throughput：吞吐率" class="headerlink" title="3.6.2TCP throughput：吞吐率"></a>3.6.2TCP throughput：吞吐率</h4><p>给定拥塞窗口大小和RTT，TCP的平均吞吐率是多少？（忽略掉Slow-start）</p><ol><li>假定发生超时是Con个Win的大小为W，吞吐率为W/RTT</li><li>超时后，CongWin = W/2，吞吐率是W/2RTT</li><li>平均吞吐率为：0.75W/RTT</li></ol><p>TCP具有公平性</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器扩展几种方式——DSA、NAS、SAN</title>
    <link href="/2022/05/18/StorageExpansion/"/>
    <url>/2022/05/18/StorageExpansion/</url>
    
    <content type="html"><![CDATA[<h2 id="1-块存储、文件存储、对象存储"><a href="#1-块存储、文件存储、对象存储" class="headerlink" title="1.块存储、文件存储、对象存储"></a>1.块存储、文件存储、对象存储</h2><p>首先我们先来了解一下，什么叫做块级？什么叫文件级？</p><p><strong>块级概念：</strong></p><p>块级是指以扇区为基础，一个或我连续的扇区组成一个块，也叫物理块。它是在文件系统与块设备（例如：磁盘驱动器）之间。</p><p><strong>文件级概念：</strong></p><p>文件级是指文件系统，单个文件可能由于一个或多个逻辑块组成，且逻辑块之间是不连续分布。逻辑块大于或等于物理块整数倍，</p><p><strong>物理块与文件系统之间的关系图：</strong></p><p>映射关系：扇区→物理块→逻辑块→文件系统</p><p><strong>【块存储】</strong></p><p>典型设备：磁盘阵列，硬盘，虚拟硬盘</p><p><strong>【文件存储】</strong><br>典型设备：FTP、NFS服务器，SamBa</p><p><strong>【对象存储】</strong><br>典型设备：内置大容量硬盘的分布式服务器</p><p><img src="https://img-blog.csdnimg.cn/20190122170132658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzYxODA3MA==,size_16,color_FFFFFF,t_70"></p><h2 id="2-DSA、NAS、SAN"><a href="#2-DSA、NAS、SAN" class="headerlink" title="2.DSA、NAS、SAN"></a>2.DSA、NAS、SAN</h2><p><img src="http://mms2.baidu.com/it/u=2947806859,1446167110&fm=253&app=138&f=JPG&fmt=auto&q=75?w=570&h=250"></p><h3 id="2-1-DAS"><a href="#2-1-DAS" class="headerlink" title="2.1 DAS"></a>2.1 DAS</h3><p>​    开放系统的直连式存储(Direct-Attached Storage，简称DAS)已经有近四十年的使用历史，随着用户数据的不断增长，尤其是数百GB以上时，其在备份、恢复、扩展、灾备等方面的问题变得日益困扰系统<a href="https://baike.baidu.com/item/%E7%AE%A1%E7%90%86%E5%91%98">管理员</a>。</p><p>​    直连式存储与服务器主机之间的连接通道通常采用SCSI连接，随着服务器CPU的处理能力越来越强，存储硬盘空间越来越大，阵列的硬盘数量越来越多，SCSI通道将会成为IO瓶颈；服务器主机SCSI ID资源有限，能够建立的SCSI通道连接有限。</p><h3 id="2-2-NAS"><a href="#2-2-NAS" class="headerlink" title="2.2 NAS"></a>2.2 NAS</h3><p>​    NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8%E5%99%A8/9485387">网络存储器</a>”。它是一种专用数据<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8">存储服务器</a>。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。</p><h3 id="2-3-SAN"><a href="#2-3-SAN" class="headerlink" title="2.3 SAN"></a>2.3 SAN</h3><p>​    存储区域网络（Storage Area Network，简称<a href="https://baike.baidu.com/item/SAN">SAN</a>）采用网状通道（Fibre Channel ，简称<a href="https://baike.baidu.com/item/FC">FC</a>，区别与Fiber Channel光纤通道）技术，通过FC交换机连接<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E9%98%B5%E5%88%97/1496275">存储阵列</a>和服务器<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151">主机</a>，建立专用于<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/9827490">数据存储</a>的区域网络。SAN经过十多年历史的发展，已经相当成熟，成为业界的事实标准（但各个厂商的光纤交换技术不完全相同，其服务器和SAN存储有兼容性的要求）。</p><p>​    SAN专注于企业级存储的特有问题。当前企业存储方案所遇到问题的两个根源是：数据与应用系统紧密结合所产生的结构性限制，以及<a href="https://baike.baidu.com/item/%E5%B0%8F%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3/10638565">小型计算机系统接口</a>(SCSI)标准的限制。大多数分析都认为SAN是未来企业级的存储方案，这是因为SAN便于集成，能改善数据可用性及网络性能，而且还可以减轻管理作业。</p><p><img src="http://2b.zol-img.com.cn/product/72_450x337/365/ceDgNl1J8XHJ6.jpg"></p><iframe src="//player.bilibili.com/player.html?aid=975632846&bvid=BV1q44y1b7zu&cid=412877341&page=1" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"> </iframe><p><a href="https://blog.csdn.net/qq_23348071/article/details/73963407?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165285079216782184616751%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165285079216782184616751&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-73963407-null-null.142%5Ev10%5Epc_search_result_control_group,157%5Ev4%5Econtrol&utm_term=NAS+SAN+DAS&spm=1018.2226.3001.4187">DAS、SAN、NAS三种存储方式的概念及应用(CSDN)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Storage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git将本地仓库和远程仓库进行关联</title>
    <link href="/2022/05/16/GitBranch/"/>
    <url>/2022/05/16/GitBranch/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Git将本地仓库和远程仓库进行关联"><a href="#1-Git将本地仓库和远程仓库进行关联" class="headerlink" title="1.Git将本地仓库和远程仓库进行关联"></a>1.Git将本地仓库和远程仓库进行关联</h3><ol><li><p>创建本地仓库（新建空文件夹）</p></li><li><p>执行初始化命令：<strong>git init</strong>（会出现一个.git文件）</p></li><li><p>创建远程仓库</p></li><li><p>本地仓库和远程仓库关联</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/###/</span><span class="hljs-comment">###.git</span><br></code></pre></td></tr></table></figure></li><li><p>推送远程</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#第一次用</span><br>git push -u origin <span class="hljs-keyword">master</span><br><span class="hljs-title">#关联后直接用即可</span><br><span class="hljs-title">git</span> push origin <span class="hljs-keyword">master</span><br><span class="hljs-title">#强行推送，强行让本地分支覆盖远程分支</span><br><span class="hljs-title">git</span> push origin <span class="hljs-keyword">master</span> <span class="hljs-title">-f</span><br></code></pre></td></tr></table></figure></li></ol><p>-u:由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><h3 id="2-Git分支"><a href="#2-Git分支" class="headerlink" title="2.Git分支"></a>2.Git分支</h3><p><img src="https://git-scm.com/images/about/branches@2x.png"></p><p>git分支中常用指令：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-meta"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-meta"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-meta"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-meta"># 合并指定分支到当前分支</span><br>$ git merge [branch]<br><br><span class="hljs-meta"># 删除分支</span><br>$ git branch -d [branch-name]<br><br><span class="hljs-meta"># 删除远程分支</span><br>$ git push origin --delete [branch-name]<br>$ git branch -dr [remote/branch]<br></code></pre></td></tr></table></figure><p><a href="https://gitee.com/all-about-git">Git大全~Git常用命令</a></p><p><a href="https://baike.baidu.com/item/GIT/12647237?fr=aladdin">Git基本信息</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础</title>
    <link href="/2022/05/15/GitBase/"/>
    <url>/2022/05/15/GitBase/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Git与SVN的主要区别"><a href="#1-Git与SVN的主要区别" class="headerlink" title="1.Git与SVN的主要区别"></a>1.Git与SVN的主要区别</h3><ul><li>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</li><li>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</li></ul><h3 id="2-常用的Linux命令"><a href="#2-常用的Linux命令" class="headerlink" title="2.常用的Linux命令"></a>2.常用的Linux命令</h3><ol><li>cd : 改变目录。</li><li>cd . . 回退到上一个目录，直接cd进入默认目录</li><li>pwd : 显示当前所在的目录路径。</li><li>ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</li><li>touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</li><li>rm:  删除一个文件, rm index.js 就会把index.js文件删除。</li><li>mkdir:  新建一个目录,就是新建一个文件夹。</li><li>rm -r :  删除一个文件夹, rm -r src 删除src目录（rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！）</li><li>mv 移动文件, mv index.html src ; index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</li><li>reset 重新初始化终端/清屏。</li><li>clear 清屏。</li><li>history 查看命令历史。</li><li>help 帮助。</li><li>exit 退出。</li><li>#表示注释</li></ol><h3 id="3-Git基本理论"><a href="#3-Git基本理论" class="headerlink" title="3.Git基本理论"></a>3.Git基本理论</h3><h4 id="3-1三个区域"><a href="#3-1三个区域" class="headerlink" title="3.1三个区域"></a>3.1三个区域</h4><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0NJ4L9OPI9ia1MmibpvDd6cSddBdvrlbdEtyEOrh4CKnWVibyfCHa3lzXw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0icz6X2aibIgUWzHxtwX8kicPCKpDrsiaPzZk04OlI2bzlydzicBuXTJvLEQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><ul><li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li><li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li><li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li><li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li></ul><h4 id="3-2工作流程"><a href="#3-2工作流程" class="headerlink" title="3.2工作流程"></a>3.2工作流程</h4><p>git的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到git仓库。</li></ol><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><h3 id="4-Git项目搭建"><a href="#4-Git项目搭建" class="headerlink" title="4.Git项目搭建"></a>4.Git项目搭建</h3><h4 id="4-1创建工作目录与常用指令"><a href="#4-1创建工作目录与常用指令" class="headerlink" title="4.1创建工作目录与常用指令"></a>4.1创建工作目录与常用指令</h4><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0AII6YVooUzibpibzJnoOHHXUsL3f9DqA4horUibfcpEZ88Oyf2gQQNR6w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1"></p><h4 id="4-2本地仓库搭建"><a href="#4-2本地仓库搭建" class="headerlink" title="4.2本地仓库搭建"></a>4.2本地仓库搭建</h4><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><p><strong>本地仓库搭建</strong></p><ol><li><p>创建全新的仓库，需要用GIT管理的项目的根目录执行：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># 在当前目录新建一个Git代码库</span><br>$ git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure></li><li><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p></li></ol><p><strong>克隆远程仓库</strong></p><ol><li><p>另一种方式是克隆远程目录，是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 克隆一个项目和它的整个代码历史(版本信息)</span><br>$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>]  <span class="hljs-comment"># https://gitee.com/###/###</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="5-Git文件操作"><a href="#5-Git文件操作" class="headerlink" title="5.Git文件操作"></a>5.Git文件操作</h3><h4 id="5-1文件的四种状态"><a href="#5-1文件的四种状态" class="headerlink" title="5.1文件的四种状态"></a>5.1文件的四种状态</h4><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li><li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li><li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li><li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li></ul><h4 id="5-2查看文件状态"><a href="#5-2查看文件状态" class="headerlink" title="5.2查看文件状态"></a>5.2查看文件状态</h4><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#查看指定文件状态</span><br>git status [filename]<br><br><span class="hljs-meta">#查看所有文件状态</span><br>git status<br><br><span class="hljs-meta"># git add .                  添加所有文件到暂存区</span><br><span class="hljs-meta"># git commit -m &quot;消息内容&quot;    提交暂存区中的内容到本地仓库 -m 提交信息</span><br></code></pre></td></tr></table></figure><h4 id="5-3忽略文件"><a href="#5-3忽略文件" class="headerlink" title="5.3忽略文件"></a>5.3忽略文件</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#为注释</span><br>*.txt        <span class="hljs-comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br>!lib.txt     <span class="hljs-comment">#但lib.txt除外</span><br>/temp        <span class="hljs-comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br>build<span class="hljs-regexp">/       #忽略build/</span>目录下的所有文件<br>doc<span class="hljs-regexp">/*.txt    #会忽略 doc/</span>notes.txt 但不包括 doc<span class="hljs-regexp">/server/</span>arch.txt<br></code></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ">详情引用</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中isEmpty、null和&quot;&quot;的区别</title>
    <link href="/2022/01/17/algorithm/"/>
    <url>/2022/01/17/algorithm/</url>
    
    <content type="html"><![CDATA[<p>Java中isEmpty、null和””的区别</p><span id="more"></span><h2 id="Java中isEmpty、null和””的区别"><a href="#Java中isEmpty、null和””的区别" class="headerlink" title="Java中isEmpty、null和””的区别:"></a>Java中isEmpty、null和””的区别:</h2><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h3><p>分配了内存空间，值为空，是绝对的空，是一种有值（值 = 空)</p><h3 id="“”"><a href="#“”" class="headerlink" title="“”"></a>“”</h3><p>分配了内存空间，值为空字符串，是相对的空，是一种有值（值 = 空字串）  </p><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>是未分配内存空间，无值，是一种无值(值不存在)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL事务隔离级别、什么是脏读、不可重复读和幻读以及如何解决</title>
    <link href="/2022/01/12/transaction/"/>
    <url>/2022/01/12/transaction/</url>
    
    <content type="html"><![CDATA[<p>在解释脏读、不可重复读和幻读之前，先来说下数据库的事务隔离级别。MySQL 的事务隔离级别（Isolation Level），是指：当多个线程操作数据库时，数据库要负责隔离操作，来保证各个线程在获取数据时的准确性。它分为四个不同的层次，按隔离水平高低排序，读未提交 &lt; 读已提交 &lt; 可重复度 &lt; 串行化。</p><span id="more"></span><h2 id="什么是脏读、不可重复读和幻读以及如何解决"><a href="#什么是脏读、不可重复读和幻读以及如何解决" class="headerlink" title="什么是脏读、不可重复读和幻读以及如何解决"></a>什么是脏读、不可重复读和幻读以及如何解决</h2><p>读未提交（Read uncommitted）：隔离级别最低、隔离度最弱，脏读、不可重复读、幻读三种现象都可能发生。所以它基本是理论上的存在，实际项目中没有人用，但性能最高。</p><p>读已提交（Read committed）：它保证了事务不出现中间状态的数据，所有数据都是已提交且更新的，解决了脏读的问题。但读已提交级别依旧很低，它允许事务间可并发修改数据，所以不保证再次读取时能得到同样的数据，也就是还会存在不可重复读、幻读的可能。</p><p>可重复读（Repeatable reads）：MySQL InnoDB 引擎的默认隔离级别，保证同一个事务中多次读取数据的一致性，解决脏读和不可重复读，但仍然存在幻读的可能。</p><p>可串行化（Serializable）：选择“可串行化”意味着读取数据时，需要获取共享读锁；更新数据时，需要获取排他写锁；如果 SQL 使用 WHERE 语句，还会获取区间锁。换句话说，事务 A 操作数据库时，事务 B 只能排队等待，因此性能也最低。</p><p>以上就是数据库的事务隔离级别，下面来说下什么是脏读、不可重复读、幻读。</p><h3 id="一、脏读：-读到了未提交事务的数据。"><a href="#一、脏读：-读到了未提交事务的数据。" class="headerlink" title="一、脏读： 读到了未提交事务的数据。"></a>一、脏读： 读到了未提交事务的数据。</h3><p>假设有 A 和 B 两个事务，在并发情况下，事务 A 先开始读取商品数据表中的数据，然后再执行更新操作，如果此时事务 A 还没有提交更新操作，但恰好事务 B 开始，然后也需要读取商品数据，此时事务 B 查询得到的是刚才事务 A 更新后的数据。</p><p>如果接下来事务 A 触发了回滚，那么事务 B 刚才读到的数据就是过时的数据，这种现象就是脏读。</p><h4 id="“脏读”如何解决："><a href="#“脏读”如何解决：" class="headerlink" title="“脏读”如何解决："></a>“脏读”如何解决：</h4><p>脏读的隔离级别是“读未提交”，只有该隔离级别才会出现脏读。</p><p>脏读的解决办法是升级事务隔离级别，比如“读已提交”。</p><h3 id="二、不可重复读：-事务-A-先读取一条数据，然后执行逻辑的过程中，事务-B-更新了这条数据，事务-A-再读取时，发现数据不匹配，这个现象就是“不可重复读”。"><a href="#二、不可重复读：-事务-A-先读取一条数据，然后执行逻辑的过程中，事务-B-更新了这条数据，事务-A-再读取时，发现数据不匹配，这个现象就是“不可重复读”。" class="headerlink" title="二、不可重复读： 事务 A 先读取一条数据，然后执行逻辑的过程中，事务 B 更新了这条数据，事务 A 再读取时，发现数据不匹配，这个现象就是“不可重复读”。"></a>二、不可重复读： 事务 A 先读取一条数据，然后执行逻辑的过程中，事务 B 更新了这条数据，事务 A 再读取时，发现数据不匹配，这个现象就是“不可重复读”。</h3><h4 id="“不可重复读”如何解决："><a href="#“不可重复读”如何解决：" class="headerlink" title="“不可重复读”如何解决："></a>“不可重复读”如何解决：</h4><p>简单的说是两次读取的数据中间被修改，对应的隔离级别是“读未提交”或“读已提交”。</p><p>不可重复读的解决办法就是升级事务隔离级别，比如“可重复度”。</p><h3 id="三、幻读：-在一个事务内，同一条查询语句在不同时间段执行，得到不同的结果集。"><a href="#三、幻读：-在一个事务内，同一条查询语句在不同时间段执行，得到不同的结果集。" class="headerlink" title="三、幻读： 在一个事务内，同一条查询语句在不同时间段执行，得到不同的结果集。"></a>三、幻读： 在一个事务内，同一条查询语句在不同时间段执行，得到不同的结果集。</h3><p>事务 A 读了一次商品表，得到最后的 ID 是 3，事务 B 也同样读了一次，得到最后 ID 也是 3。接下来事务 A 先插入了一行，然后读了一下最新的 ID 是 4，刚好是前面 ID 3 加上 1，然后事务 B 也插入了一行，接着读了一下最新的 ID 发现是 5，而不是 3 加 1。</p><p>使用 ID 做判断或做关键数据时，就会出现问题，这种现象就像是让事务 B 产生了幻觉一样，读取到了一个意想不到的数据，所以叫幻读。当然，不仅仅是新增，删除、修改数据也会发生类似的情况。</p><h4 id="“幻读”如何解决："><a href="#“幻读”如何解决：" class="headerlink" title="“幻读”如何解决："></a>“幻读”如何解决：</h4><p>解决幻读不能升级事务隔离级别到“可串行化”，那样数据库也失去了并发处理能力。</p><p>行锁也解决不了幻读，因为即使锁住所有记录，还是阻止不了插入新数据。</p><p>解决幻读的办法是锁住记录之间的“间隙”，因此 MySQL InnoDB 引入了新的锁，叫间隙锁（Gap Lock），这块需要使用间隙锁来解决幻读。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>memo——十三邀</title>
    <link href="/2022/01/08/memo/"/>
    <url>/2022/01/08/memo/</url>
    
    <content type="html"><![CDATA[<h2 id="十三邀"><a href="#十三邀" class="headerlink" title="十三邀"></a>十三邀</h2><h3 id="我们彼此无法证伪，你不能证伪我是没效率的，我不能证伪你是没效率的，"><a href="#我们彼此无法证伪，你不能证伪我是没效率的，我不能证伪你是没效率的，" class="headerlink" title="我们彼此无法证伪，你不能证伪我是没效率的，我不能证伪你是没效率的，"></a>我们彼此无法证伪，你不能证伪我是没效率的，我不能证伪你是没效率的，</h3><h3 id="每个时代都向往精致化，却从来没有过，"><a href="#每个时代都向往精致化，却从来没有过，" class="headerlink" title="每个时代都向往精致化，却从来没有过，"></a>每个时代都向往精致化，却从来没有过，</h3><h3 id="娱乐是人的本能，文化是沉淀的结果，"><a href="#娱乐是人的本能，文化是沉淀的结果，" class="headerlink" title="娱乐是人的本能，文化是沉淀的结果，"></a>娱乐是人的本能，文化是沉淀的结果，</h3><h3 id="每个时代都有自己时代的娱乐形式，"><a href="#每个时代都有自己时代的娱乐形式，" class="headerlink" title="每个时代都有自己时代的娱乐形式，"></a>每个时代都有自己时代的娱乐形式，</h3><h3 id="被误解是表达者的宿命，"><a href="#被误解是表达者的宿命，" class="headerlink" title="被误解是表达者的宿命，"></a>被误解是表达者的宿命，</h3><h3 id="通过假装去触碰真实，接近真实，"><a href="#通过假装去触碰真实，接近真实，" class="headerlink" title="通过假装去触碰真实，接近真实，"></a>通过假装去触碰真实，接近真实，</h3><h3 id="拷问真实下面的虚伪，接着拷问虚伪下面的真实。"><a href="#拷问真实下面的虚伪，接着拷问虚伪下面的真实。" class="headerlink" title="拷问真实下面的虚伪，接着拷问虚伪下面的真实。"></a>拷问真实下面的虚伪，接着拷问虚伪下面的真实。</h3><h3 id="太阳底下无新鲜事"><a href="#太阳底下无新鲜事" class="headerlink" title="太阳底下无新鲜事"></a>太阳底下无新鲜事</h3><h3 id="人们常常问“哲学家可以为国家做些什么”而我一般反过来问“国家可以为哲学家做些什么”"><a href="#人们常常问“哲学家可以为国家做些什么”而我一般反过来问“国家可以为哲学家做些什么”" class="headerlink" title="人们常常问“哲学家可以为国家做些什么”而我一般反过来问“国家可以为哲学家做些什么”"></a>人们常常问“哲学家可以为国家做些什么”而我一般反过来问“国家可以为哲学家做些什么”</h3><h3 id="“因为知道苏格拉底、柏拉图、亚里士多德，我们才知道雅典，所以我更想问雅典可以为他们做些什么”"><a href="#“因为知道苏格拉底、柏拉图、亚里士多德，我们才知道雅典，所以我更想问雅典可以为他们做些什么”" class="headerlink" title="“因为知道苏格拉底、柏拉图、亚里士多德，我们才知道雅典，所以我更想问雅典可以为他们做些什么”"></a>“因为知道苏格拉底、柏拉图、亚里士多德，我们才知道雅典，所以我更想问雅典可以为他们做些什么”</h3><h3 id="吉姆·柯林斯“优秀是伟大的敌人”"><a href="#吉姆·柯林斯“优秀是伟大的敌人”" class="headerlink" title="吉姆·柯林斯“优秀是伟大的敌人”"></a>吉姆·柯林斯“优秀是伟大的敌人”</h3><h3 id="上层生命给你的东西叫道德，下层生命给你的东西叫欲望，活在道德和欲望之间的木偶，"><a href="#上层生命给你的东西叫道德，下层生命给你的东西叫欲望，活在道德和欲望之间的木偶，" class="headerlink" title="上层生命给你的东西叫道德，下层生命给你的东西叫欲望，活在道德和欲望之间的木偶，"></a>上层生命给你的东西叫道德，下层生命给你的东西叫欲望，活在道德和欲望之间的木偶，</h3><p>More info: <a href="https://baike.baidu.com/item/%E5%8D%81%E4%B8%89%E9%82%80/19690871?fr=aladdin">十三邀</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/01/08/hello-world/"/>
    <url>/2022/01/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
